1.git init 

2.git add test.txt

3.git commit -m "xxxx"

4.git status

5.git diff test.txt

 diff到底比较的是哪两个版本？
 当工作区有改动，临时区为空，diff的对比是“工作区与最后一次commit提交的仓库的共同文件”；
 当工作区有改动，临时区不为空，diff对比的是“工作区与暂存区的共同文件”。

6.git log
  git log --pretty=oneline

7.git reset head
  git reset --hard head
  git reset head^
  git reset head~100
  git reset --hard 1094a
  git reset HEAD readme.txt

  git reset 重置版本版本head的指针，并且清空暂存区，如果使用--hard参数，则重置工作区的修改

8.git checkout -- file 撤销修改
  命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令

9.git rm file

10.git hub
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

10.分支
查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>或者git switch <name>

创建+切换分支：git checkout -b <name>或者git switch -c <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

11.分支冲突
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
git --graph --pretty=oneline --abbrev-commit 命令可以看到分支合并图。